import java_cup.runtime.*;

action code     //Codigo para las acciones gramaticales
{:

:}

parser code     //Codigo que se le agrega al parser
{:
    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left;
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        String errMsg = "Couldn't repair and continue parse " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left;
        report_fatal_error(errMsg, null);
    }
:}

                //Declaracion de terminales

terminal String ID;
terminal String CONST_INT;
terminal String CONST_FLOAT;
terminal String CONST_STR;

terminal DEFVAR, ENDDEF;
terminal TIPO_INTEGER, TIPO_FLOAT;

terminal WHILE;
terminal IF, ELSE;
terminal OP_AND, OP_OR, OP_NOT;

terminal OP_ASIG;
terminal OP_SUMA, OP_RESTA;
terminal OP_MUL, OP_DIV;
terminal String OP_IGUAL, OP_DISTINTO;
terminal String OP_MENOR, OP_MENOR_IGUAL, OP_MAYOR, OP_MAYOR_IGUAL;
terminal String OP_ASIG_SUM, OP_ASIG_RES, OP_ASIG_MUL, OP_ASIG_DIV;
terminal LL_A, LL_C, P_A, P_C;
terminal PUNTO_COMA;
terminal DOS_PUNTOS;
terminal COMA;
terminal GET;
terminal DISPLAY;

                //Declaracion de no terminales

non terminal Symbol inicio, programa, vacio,
             seccion_declaraciones, bloque_declaraciones, declaracion,
             tipo_dato, lista_ids, bloque, sentencia, sentencia_if,
             sentencia_if_unario ,expresion_asignacion, sentencia_if_parte_else, sentencia_while,
             expresion_logica, termino_logico, asignacion , asignacion_especial,
             factor, escritura, lectura, expresion, termino ;

non terminal String operadores_especiales, op_booleano;

start with inicio;

                //Reglas gramaticales

inicio      ::= programa {: System.out.println("Compilacion OK"); :}
            ;

programa	::= seccion_declaraciones  bloque {::}
            ;

seccion_declaraciones 	::= DEFVAR bloque_declaraciones ENDDEF {::}
                        ;

bloque_declaraciones	::= declaracion
                        | bloque_declaraciones declaracion  {::}
						;

declaracion ::= tipo_dato DOS_PUNTOS lista_ids  {::}
            ;

tipo_dato 	::= TIPO_INTEGER {::}
			| TIPO_FLOAT {::}
			;

lista_ids	::= ID {::}
			| lista_ids PUNTO_COMA ID {::}
			;

bloque  ::= sentencia
        | bloque sentencia {::}
        ;

sentencia   ::= asignacion {::}
            | asignacion_especial {::}
			| sentencia_if {::}
			| sentencia_while {::}
			| escritura {::}
			| lectura {::}
			;

sentencia_if    ::= IF P_A expresion_logica  P_C LL_A bloque  LL_C sentencia_if_parte_else {::}
                ;

sentencia_if_parte_else ::= ELSE LL_A bloque LL_C {::}
                        | vacio {::}
                        ;

vacio   ::= {::}
        ;

sentencia_while     ::= WHILE P_A expresion_logica P_C LL_A bloque LL_C {::}
                    ;

op_booleano 	::=  OP_MENOR {::}
				| OP_MENOR_IGUAL {::}
				| OP_MAYOR {::}
				| OP_MAYOR_IGUAL {::}
				| OP_IGUAL {::}
				| OP_DISTINTO {::}
				;

expresion_logica	::= termino_logico  OP_AND termino_logico {::}
					| termino_logico OP_OR termino_logico {::}
					| termino_logico {::}
					|  OP_NOT termino_logico {::}
					;

termino_logico	::= expresion op_booleano expresion {::}
                ;

asignacion 	::= ID OP_ASIG expresion  {::}
              | ID OP_ASIG IF P_A expresion_logica COMA expresion COMA expresion P_C {::}
              ;

asignacion_especial ::= ID operadores_especiales expresion  {::}
                    ;

operadores_especiales   ::= OP_ASIG_SUM {::}
                        | OP_ASIG_RES {::}
                        | OP_ASIG_MUL {::}
                        | OP_ASIG_DIV {::}
						;

expresion	::= termino {::}
			| expresion OP_SUMA termino {::}
			| expresion OP_RESTA termino {::}
			;


termino	::= termino OP_MUL factor {::}
		| termino OP_DIV factor  {::}
		| factor {::}
		;

factor	::= P_A expresion  P_C {::}
		;

factor	::= ID {::}
		| CONST_INT {::}
		| CONST_FLOAT {::}
		;

escritura	::= DISPLAY ID {::}
			| DISPLAY CONST_STR {::}
			;

lectura	::= GET ID {::}
		;
