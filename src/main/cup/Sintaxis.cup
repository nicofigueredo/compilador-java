import java_cup.runtime.*;

action code     //Codigo para las acciones gramaticales
{:
    public void mostrarRegla(Regla regla) {
        System.out.println(regla);
    }
:}

parser code     //Codigo que se le agrega al parser
{:
    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_fatal_error(errMsg, null);
    }
:}

                //Declaracion de terminales

terminal op_asig, op_suma, op_resta, op_mul, op_div;
terminal String id, const_int, const_float, const_str;

                //Declaracion de no terminales

non terminal Symbol S, PROG, SENT,
                    ASIG,
                    EXPRESION, TERMINO, FACTOR;

start with S;

                //Reglas gramaticales

S       ::= PROG {: mostrarRegla(Regla.REGLA_S);
            :}
        ;

PROG    ::= SENT {: mostrarRegla(Regla.REGLA_PROG);
            :}
        | PROG SENT {: mostrarRegla(Regla.REGLA_PROG2);
            :}
        ;

SENT    ::= ASIG {: mostrarRegla(Regla.REGLA_SENT);
            :}
        ;

ASIG    ::= id:id {:
                System.out.println("\tid: " + id);
                RESULT = new Symbol(-1);    // <- PARA PODER PONER CODIGO ANTES DEL FINAL DE LA REGLA
            :} op_asig EXPRESION {: mostrarRegla(Regla.REGLA_ASIG);
            :}
        ;

EXPRESION	::= TERMINO {: mostrarRegla(Regla.REGLA_EXPRESION);
                :}
			| EXPRESION op_suma TERMINO {: mostrarRegla(Regla.REGLA_EXPRESION2);
			    :}
			| EXPRESION op_resta TERMINO {: mostrarRegla(Regla.REGLA_EXPRESION3);
			    :}
			;

TERMINO	::= FACTOR {: mostrarRegla(Regla.REGLA_TERMINO);
            :}
		| TERMINO op_div FACTOR {: mostrarRegla(Regla.REGLA_TERMINO2);
		    :}
		| TERMINO op_mul FACTOR {: mostrarRegla(Regla.REGLA_TERMINO3);
		    :}
		;

FACTOR	::= id:id {: mostrarRegla(Regla.REGLA_FACTOR);
                System.out.println("\tid: " + id);
            :}
		| const_int:const_int {: mostrarRegla(Regla.REGLA_FACTOR2);
		        System.out.println("\tconst_int: " + const_int);
		    :}
		| const_float:const_float {: mostrarRegla(Regla.REGLA_FACTOR3);
		        System.out.println("\tconst_float: " + const_float);
		    :}
		;